//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CryptoApp.CloudServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CloudServiceReference.ICloudService")]
    public interface ICloudService {
        
        // CODEGEN: Generating message contract since the wrapper name (RemoteFileInfo) of message RemoteFileInfo does not match the default value (UploadFile)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloudService/UploadFile", ReplyAction="http://tempuri.org/ICloudService/UploadFileResponse")]
        CryptoApp.CloudServiceReference.UploadReply UploadFile(CryptoApp.CloudServiceReference.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloudService/UploadFile", ReplyAction="http://tempuri.org/ICloudService/UploadFileResponse")]
        System.Threading.Tasks.Task<CryptoApp.CloudServiceReference.UploadReply> UploadFileAsync(CryptoApp.CloudServiceReference.RemoteFileInfo request);
        
        // CODEGEN: Generating message contract since the wrapper name (DownloadRequest) of message DownloadRequest does not match the default value (DownloadFile)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloudService/DownloadFile", ReplyAction="http://tempuri.org/ICloudService/DownloadFileResponse")]
        CryptoApp.CloudServiceReference.RemoteFileInfo DownloadFile(CryptoApp.CloudServiceReference.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloudService/DownloadFile", ReplyAction="http://tempuri.org/ICloudService/DownloadFileResponse")]
        System.Threading.Tasks.Task<CryptoApp.CloudServiceReference.RemoteFileInfo> DownloadFileAsync(CryptoApp.CloudServiceReference.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloudService/GetFileList", ReplyAction="http://tempuri.org/ICloudService/GetFileListResponse")]
        string[] GetFileList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloudService/GetFileList", ReplyAction="http://tempuri.org/ICloudService/GetFileListResponse")]
        System.Threading.Tasks.Task<string[]> GetFileListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloudService/GetKey", ReplyAction="http://tempuri.org/ICloudService/GetKeyResponse")]
        string GetKey();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloudService/GetKey", ReplyAction="http://tempuri.org/ICloudService/GetKeyResponse")]
        System.Threading.Tasks.Task<string> GetKeyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloudService/DeleteFile", ReplyAction="http://tempuri.org/ICloudService/DeleteFileResponse")]
        bool DeleteFile(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloudService/DeleteFile", ReplyAction="http://tempuri.org/ICloudService/DeleteFileResponse")]
        System.Threading.Tasks.Task<bool> DeleteFileAsync(string fileName);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteFileInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RemoteFileInfo {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long Length;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileByteStream;
        
        public RemoteFileInfo() {
        }
        
        public RemoteFileInfo(string FileName, long Length, System.IO.Stream FileByteStream) {
            this.FileName = FileName;
            this.Length = Length;
            this.FileByteStream = FileByteStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadReply", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadReply {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string FileName;
        
        public UploadReply() {
        }
        
        public UploadReply(string FileName) {
            this.FileName = FileName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string FileName;
        
        public DownloadRequest() {
        }
        
        public DownloadRequest(string FileName) {
            this.FileName = FileName;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICloudServiceChannel : CryptoApp.CloudServiceReference.ICloudService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CloudServiceClient : System.ServiceModel.ClientBase<CryptoApp.CloudServiceReference.ICloudService>, CryptoApp.CloudServiceReference.ICloudService {
        
        public CloudServiceClient() {
        }
        
        public CloudServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CloudServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CloudServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CloudServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CryptoApp.CloudServiceReference.UploadReply CryptoApp.CloudServiceReference.ICloudService.UploadFile(CryptoApp.CloudServiceReference.RemoteFileInfo request) {
            return base.Channel.UploadFile(request);
        }
        
        public void UploadFile(ref string FileName, long Length, System.IO.Stream FileByteStream) {
            CryptoApp.CloudServiceReference.RemoteFileInfo inValue = new CryptoApp.CloudServiceReference.RemoteFileInfo();
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.FileByteStream = FileByteStream;
            CryptoApp.CloudServiceReference.UploadReply retVal = ((CryptoApp.CloudServiceReference.ICloudService)(this)).UploadFile(inValue);
            FileName = retVal.FileName;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CryptoApp.CloudServiceReference.UploadReply> CryptoApp.CloudServiceReference.ICloudService.UploadFileAsync(CryptoApp.CloudServiceReference.RemoteFileInfo request) {
            return base.Channel.UploadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<CryptoApp.CloudServiceReference.UploadReply> UploadFileAsync(string FileName, long Length, System.IO.Stream FileByteStream) {
            CryptoApp.CloudServiceReference.RemoteFileInfo inValue = new CryptoApp.CloudServiceReference.RemoteFileInfo();
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.FileByteStream = FileByteStream;
            return ((CryptoApp.CloudServiceReference.ICloudService)(this)).UploadFileAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CryptoApp.CloudServiceReference.RemoteFileInfo CryptoApp.CloudServiceReference.ICloudService.DownloadFile(CryptoApp.CloudServiceReference.DownloadRequest request) {
            return base.Channel.DownloadFile(request);
        }
        
        public long DownloadFile(ref string FileName, out System.IO.Stream FileByteStream) {
            CryptoApp.CloudServiceReference.DownloadRequest inValue = new CryptoApp.CloudServiceReference.DownloadRequest();
            inValue.FileName = FileName;
            CryptoApp.CloudServiceReference.RemoteFileInfo retVal = ((CryptoApp.CloudServiceReference.ICloudService)(this)).DownloadFile(inValue);
            FileName = retVal.FileName;
            FileByteStream = retVal.FileByteStream;
            return retVal.Length;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CryptoApp.CloudServiceReference.RemoteFileInfo> CryptoApp.CloudServiceReference.ICloudService.DownloadFileAsync(CryptoApp.CloudServiceReference.DownloadRequest request) {
            return base.Channel.DownloadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<CryptoApp.CloudServiceReference.RemoteFileInfo> DownloadFileAsync(string FileName) {
            CryptoApp.CloudServiceReference.DownloadRequest inValue = new CryptoApp.CloudServiceReference.DownloadRequest();
            inValue.FileName = FileName;
            return ((CryptoApp.CloudServiceReference.ICloudService)(this)).DownloadFileAsync(inValue);
        }
        
        public string[] GetFileList() {
            return base.Channel.GetFileList();
        }
        
        public System.Threading.Tasks.Task<string[]> GetFileListAsync() {
            return base.Channel.GetFileListAsync();
        }
        
        public string GetKey() {
            return base.Channel.GetKey();
        }
        
        public System.Threading.Tasks.Task<string> GetKeyAsync() {
            return base.Channel.GetKeyAsync();
        }
        
        public bool DeleteFile(string fileName) {
            return base.Channel.DeleteFile(fileName);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFileAsync(string fileName) {
            return base.Channel.DeleteFileAsync(fileName);
        }
    }
}
