//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CryptoApp.CryptoServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CryptoServiceReference.ICryptoService")]
    public interface ICryptoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/Crypt", ReplyAction="http://tempuri.org/ICryptoService/CryptResponse")]
        byte[] Crypt(byte[] input, CryptoLib.Algorithm a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/Crypt", ReplyAction="http://tempuri.org/ICryptoService/CryptResponse")]
        System.Threading.Tasks.Task<byte[]> CryptAsync(byte[] input, CryptoLib.Algorithm a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/DeCrypt", ReplyAction="http://tempuri.org/ICryptoService/DeCryptResponse")]
        byte[] DeCrypt(byte[] input, CryptoLib.Algorithm a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/DeCrypt", ReplyAction="http://tempuri.org/ICryptoService/DeCryptResponse")]
        System.Threading.Tasks.Task<byte[]> DeCryptAsync(byte[] input, CryptoLib.Algorithm a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/SetKey", ReplyAction="http://tempuri.org/ICryptoService/SetKeyResponse")]
        bool SetKey(byte[] input, CryptoLib.Algorithm a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/SetKey", ReplyAction="http://tempuri.org/ICryptoService/SetKeyResponse")]
        System.Threading.Tasks.Task<bool> SetKeyAsync(byte[] input, CryptoLib.Algorithm a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/SetProperties", ReplyAction="http://tempuri.org/ICryptoService/SetPropertiesResponse")]
        bool SetProperties(System.Collections.Generic.Dictionary<string, byte[]> specArguments, CryptoLib.Algorithm a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/SetProperties", ReplyAction="http://tempuri.org/ICryptoService/SetPropertiesResponse")]
        System.Threading.Tasks.Task<bool> SetPropertiesAsync(System.Collections.Generic.Dictionary<string, byte[]> specArguments, CryptoLib.Algorithm a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/SetIV", ReplyAction="http://tempuri.org/ICryptoService/SetIVResponse")]
        bool SetIV(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/SetIV", ReplyAction="http://tempuri.org/ICryptoService/SetIVResponse")]
        System.Threading.Tasks.Task<bool> SetIVAsync(byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RandomizeKeys", ReplyAction="http://tempuri.org/ICryptoService/RandomizeKeysResponse")]
        byte[][] RandomizeKeys();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RandomizeKeys", ReplyAction="http://tempuri.org/ICryptoService/RandomizeKeysResponse")]
        System.Threading.Tasks.Task<byte[][]> RandomizeKeysAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RandomizeIV", ReplyAction="http://tempuri.org/ICryptoService/RandomizeIVResponse")]
        byte[] RandomizeIV();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/RandomizeIV", ReplyAction="http://tempuri.org/ICryptoService/RandomizeIVResponse")]
        System.Threading.Tasks.Task<byte[]> RandomizeIVAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICryptoServiceChannel : CryptoApp.CryptoServiceReference.ICryptoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CryptoServiceClient : System.ServiceModel.ClientBase<CryptoApp.CryptoServiceReference.ICryptoService>, CryptoApp.CryptoServiceReference.ICryptoService {
        
        public CryptoServiceClient() {
        }
        
        public CryptoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CryptoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CryptoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CryptoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public byte[] Crypt(byte[] input, CryptoLib.Algorithm a) {
            return base.Channel.Crypt(input, a);
        }
        
        public System.Threading.Tasks.Task<byte[]> CryptAsync(byte[] input, CryptoLib.Algorithm a) {
            return base.Channel.CryptAsync(input, a);
        }
        
        public byte[] DeCrypt(byte[] input, CryptoLib.Algorithm a) {
            return base.Channel.DeCrypt(input, a);
        }
        
        public System.Threading.Tasks.Task<byte[]> DeCryptAsync(byte[] input, CryptoLib.Algorithm a) {
            return base.Channel.DeCryptAsync(input, a);
        }
        
        public bool SetKey(byte[] input, CryptoLib.Algorithm a) {
            return base.Channel.SetKey(input, a);
        }
        
        public System.Threading.Tasks.Task<bool> SetKeyAsync(byte[] input, CryptoLib.Algorithm a) {
            return base.Channel.SetKeyAsync(input, a);
        }
        
        public bool SetProperties(System.Collections.Generic.Dictionary<string, byte[]> specArguments, CryptoLib.Algorithm a) {
            return base.Channel.SetProperties(specArguments, a);
        }
        
        public System.Threading.Tasks.Task<bool> SetPropertiesAsync(System.Collections.Generic.Dictionary<string, byte[]> specArguments, CryptoLib.Algorithm a) {
            return base.Channel.SetPropertiesAsync(specArguments, a);
        }
        
        public bool SetIV(byte[] input) {
            return base.Channel.SetIV(input);
        }
        
        public System.Threading.Tasks.Task<bool> SetIVAsync(byte[] input) {
            return base.Channel.SetIVAsync(input);
        }
        
        public byte[][] RandomizeKeys() {
            return base.Channel.RandomizeKeys();
        }
        
        public System.Threading.Tasks.Task<byte[][]> RandomizeKeysAsync() {
            return base.Channel.RandomizeKeysAsync();
        }
        
        public byte[] RandomizeIV() {
            return base.Channel.RandomizeIV();
        }
        
        public System.Threading.Tasks.Task<byte[]> RandomizeIVAsync() {
            return base.Channel.RandomizeIVAsync();
        }
    }
}
